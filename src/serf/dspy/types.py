# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
from enum import Enum

from pydantic import BaseModel


class Exchange(str, Enum):
    UN = "UN"
    UQ = "UQ"
    UA = "UA"
    UR = "UR"
    UM = "UM"
    UW = "UW"
    UV = "UV"
    UP = "UP"
    CT = "CT"
    CV = "CV"
    CN = "CN"
    LN = "LN"
    GR = "GR"
    FP = "FP"
    NA = "NA"
    BB = "BB"
    IM = "IM"
    ID = "ID"
    PL = "PL"
    NO = "NO"
    SM = "SM"
    SW = "SW"
    DC = "DC"
    SS = "SS"
    FH = "FH"
    PW = "PW"
    AV = "AV"
    CP = "CP"
    GA = "GA"
    TI = "TI"
    JT = "JT"
    HK = "HK"
    SP = "SP"
    CH = "CH"
    CZ = "CZ"
    KS = "KS"
    TT = "TT"
    IB = "IB"
    IN = "IN"
    IJ = "IJ"
    TB = "TB"
    PM = "PM"
    MK = "MK"
    AT = "AT"
    NZ = "NZ"
    BZ = "BZ"
    MM = "MM"
    AR = "AR"
    CB = "CB"
    PE = "PE"
    SJ = "SJ"
    IT = "IT"
    AB = "AB"
    DH = "DH"
    DU = "DU"
    QD = "QD"
    EY = "EY"


class RelationshipType(str, Enum):
    Supplier = "Supplier"
    Acquisition = "Acquisition"
    Financing = "Financing"
    Investment = "Investment"
    Partnership = "Partnership"
    Licensing = "Licensing"
    Subsidiary = "Subsidiary"
    OEM = "OEM"


class Result(str, Enum):
    MATCH = "MATCH"
    NO_MATCH = "NO_MATCH"


class AnnualReportData(BaseModel):
    reporting_company: "Company"
    fiscal_year: typing.Optional[int] = None
    report_date: typing.Optional[str] = None
    companies: typing.List["Company"]
    products: typing.Optional[typing.List["Product"]] = None
    technologies: typing.Optional[typing.List["Technology"]] = None
    relationships: typing.List["Relationship"]


class Author(BaseModel):
    name: str
    profile_url: typing.Optional[str] = None


class Company(BaseModel):
    id: int
    uuid: typing.Optional[str] = None
    name: str
    cik: typing.Optional[str] = None
    ticker: typing.Optional["Ticker"] = None
    description: str
    website_url: typing.Optional[str] = None
    headquarters_location: typing.Optional[str] = None
    jurisdiction: typing.Optional[str] = None
    revenue_usd: typing.Optional[int] = None
    employees: typing.Optional[int] = None
    founded_year: typing.Optional[int] = None
    ceo: typing.Optional[str] = None
    linkedin_url: typing.Optional[str] = None
    source_ids: typing.Optional[typing.List[int]] = None
    source_uuids: typing.Optional[typing.List[str]] = None


class CompanyList(BaseModel):
    block_key: typing.Optional[str] = None
    block_key_type: typing.Optional[str] = None
    block_size: typing.Optional[int] = None
    companies: typing.List["Company"]


class EntityResolutionResponse(BaseModel):
    match: Result
    company: typing.Optional["Company"] = None


class IndustryArticle(BaseModel):
    title: str
    url: typing.Optional[str] = None
    source: typing.Optional["NewsSource"] = None
    collected_at: typing.Optional[str] = None
    posted_at: typing.Optional[str] = None
    authors: typing.Optional[typing.List["Author"]] = None
    summary: str
    companies: typing.Optional[typing.List["Company"]] = None
    tickers: typing.Optional[typing.List["Ticker"]] = None
    products: typing.Optional[typing.List["Product"]] = None
    technologies: typing.Optional[typing.List["Technology"]] = None
    relationships: typing.Optional[typing.List["Relationship"]] = None
    cited_sources: typing.Optional[typing.List["NewsSource"]] = None


class Nation(BaseModel):
    common_name: str
    full_name: typing.Optional[str] = None
    iso_2: typing.Optional[str] = None
    iso_3: typing.Optional[str] = None
    gdp: typing.Optional[float] = None


class NewsSource(BaseModel):
    name: str
    url: typing.Optional[str] = None


class Product(BaseModel):
    id: int
    uuid: typing.Optional[str] = None
    name: str
    description: str
    manufacturer: typing.Optional[int] = None
    technologies: typing.Optional[typing.List[int]] = None
    source_ids: typing.Optional[typing.List[int]] = None
    source_uuids: typing.Optional[typing.List[str]] = None


class Relationship(BaseModel):
    src_company: int
    dst_company: int
    type: RelationshipType
    technologies: typing.Optional[typing.List[int]] = None
    products: typing.Optional[typing.List[int]] = None
    description: str
    percentage: typing.Optional[float] = None
    amount: typing.Optional[float] = None
    currency: typing.Optional[str] = None
    country: typing.Optional["Nation"] = None
    date: typing.Optional[str] = None
    quarter: typing.Optional[str] = None


class Technology(BaseModel):
    id: int
    uuid: typing.Optional[str] = None
    name: str
    developer: typing.Optional[int] = None
    description: str
    source_ids: typing.Optional[typing.List[int]] = None
    source_uuids: typing.Optional[typing.List[str]] = None


class Ticker(BaseModel):
    id: typing.Optional[int] = None
    uuid: typing.Optional[str] = None
    symbol: str
    exchange: typing.Optional[Exchange] = None


class TickerList(BaseModel):
    tickers: typing.List["Ticker"]
